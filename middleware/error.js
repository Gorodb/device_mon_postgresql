const ErrorResponse = require('../utils/errorResponse')const colors = require('colors')const errorHandler = (err, req, res, next) => {    let error = { ...err }    error.message = err.message    console.log(err)    try {        // mongoose bad ObjectId        if (err.name === 'CastError') {            let message            if (typeof err.message === 'object') {                message = `Resource with id '${err.value}' not found`            } else {                message = `Resource '${JSON.stringify(err.value)}' not found in path '${err.path}'`            }            error = new ErrorResponse(message, 404)        }        // validation error        if (err.name === 'SequelizeValidationError') {            let messages = Object.values(err.errors).map(val => val.message).join('. ')            console.log(messages.red)            error = new ErrorResponse(messages, 400)        }        // validation error        if (err.name === 'SequelizeUniqueConstraintError') {            const re = /\([^=]+\)/g            let values = err.parent.detail.match(re).map(value => value.replace(/[(|)]/g, ''))            error = new ErrorResponse(`${values[0]} со значением ${values[1]} уже существует`, 400)        }        res.status(error.statusCode || 500).json({            success: false,            error: error.message || 'Internal server error'        })    } catch (err) {        // console.log(err.toString().red)        res.status(error.statusCode || 500).json({            success: false,            error: error.message || 'Internal server error'        })    }}module.exports = errorHandler